pipeline {
    agent any
    environment {
        VERSION = "0.1.0"        
        VERSION_RC = "rc.2"
    }
    parameters {
        booleanParam(name: 'RC', defaultValue: false, description: 'Is RC?')
    }
    stages {
        stage('Audit tools') {                        
            steps {
                printCommand();
            }
        }
        stage('Build') {
            steps {
              echo "Building version: ${VERSION} with suffix: ${VERSION_RC}"
              //bat 'dotnet build -p:VersionPrefix="${VERSION}" --version-suffix "${VERSION_RC}" ./m3/src/Pi.Web/Pi.Web.csproj'
            }
        }
        stage('Unit Test') {
            steps {
                String versioning = getVersion();  
                echo "Building versioning: ${versioning}"
              dir('./m3/src') {
                bat '''
                    dotnet test --logger "trx;LogFileName=Pi.Math.trx" Pi.Math.Tests/Pi.Math.Tests.csproj
                    dotnet test --logger "trx;LogFileName=Pi.Runtime.trx" Pi.Runtime.Tests/Pi.Runtime.Tests.csproj
                '''
                mstest testResultsFile:"**/*.trx", keepLongStdio: true
              }
            }
        }
        stage('Smoke Test') {
            steps {
              bat 'dotnet ./m3/src/Pi.Web/bin/Debug/netcoreapp3.1/Pi.Web.dll'
            }
        }
    }
}

String getVersion(){
    if(params.RC) {
        return "1.0";
    } else {
        return "0.1.2";
    }
}

void printCommand(){
    bat '''
          git version
          docker version
          dotnet --list-sdks
          dotnet --list-runtimes
        '''
}
